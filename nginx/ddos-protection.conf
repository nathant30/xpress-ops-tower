# DDoS Protection Configuration for Xpress Ops Tower
# Advanced rate limiting and connection management

# Define rate limiting zones with different thresholds
limit_req_zone $binary_remote_addr zone=global:50m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api_strict:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=emergency_burst:20m rate=100r/s;
limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=perip:10m;
limit_conn_zone $server_name zone=perserver:10m;

# Main server configuration with DDoS protection
server {
    # Connection limits
    limit_conn perip 20;        # Max 20 connections per IP
    limit_conn perserver 1000;  # Max 1000 connections to server
    
    # Global rate limiting
    limit_req zone=global burst=50 nodelay;
    
    # Request size limits
    client_max_body_size 10M;
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;
    
    # Timeouts to prevent slow attacks
    client_body_timeout 10s;
    client_header_timeout 10s;
    keepalive_timeout 15s;
    send_timeout 10s;
    
    # Slow down attackers
    limit_req_status 429;
    limit_conn_status 429;
    
    # Emergency endpoints need higher limits
    location /api/emergency/ {
        limit_req zone=emergency_burst burst=100 nodelay;
        limit_conn perip 50;  # Higher limit for emergency
    }
    
    # Strict limits for authentication
    location /api/auth/ {
        limit_req zone=api_strict burst=5 nodelay;
        limit_conn perip 5;
    }
    
    # Static assets
    location ~* \.(css|js|jpg|png|gif|ico|svg|woff|woff2)$ {
        limit_req zone=static burst=100 nodelay;
        expires 1y;
        add_header Cache-Control public;
    }
    
    # Block requests with no User-Agent or common bot patterns
    if ($http_user_agent = "") {
        return 403;
    }
    
    if ($http_user_agent ~* "(bot|crawler|spider|scraper)") {
        limit_req zone=api_strict burst=2 nodelay;
    }
    
    # Block requests with suspicious patterns
    location ~* "(eval\(|base64_decode|system\(|exec\(|shell_exec)" {
        return 403;
    }
    
    # Custom error pages for rate limiting
    error_page 429 /429.html;
    location = /429.html {
        root /var/www/html/errors;
        internal;
        add_header Content-Type text/html;
        return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Rate Limited</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .error { color: #d32f2f; }
    </style>
</head>
<body>
    <div class="error">
        <h1>429 - Too Many Requests</h1>
        <p>You are being rate limited. Please slow down your requests.</p>
        <p>Emergency services: Call your local emergency number immediately for urgent assistance.</p>
    </div>
</body>
</html>';
    }
}

# Logging configuration for monitoring attacks
log_format ddos_log '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   'rt=$request_time ut="$upstream_response_time" '
                   'cs=$upstream_cache_status';

# Enable logging for rate-limited requests
access_log /var/log/nginx/ddos_access.log ddos_log;
error_log /var/log/nginx/ddos_error.log warn;