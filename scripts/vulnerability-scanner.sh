#!/bin/bash
# Automated Vulnerability Scanner for Xpress Ops Tower
# Integrates multiple security scanning tools in CI/CD pipeline

set -e

SCAN_DIR="/Users/nathan/Desktop/claude/Projects/ops-tower"
REPORTS_DIR="${SCAN_DIR}/security/vulnerability-reports"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
REPORT_FILE="${REPORTS_DIR}/vulnerability-scan-${TIMESTAMP}.json"

echo "🔍 Starting comprehensive vulnerability scan..."

# Create reports directory
mkdir -p "$REPORTS_DIR"

# Initialize scan report
cat > "$REPORT_FILE" << EOF
{
  "scan_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "scan_id": "vuln_scan_${TIMESTAMP}",
  "project": "xpress_ops_tower",
  "scan_type": "comprehensive",
  "tools_used": [],
  "vulnerabilities": [],
  "summary": {
    "critical": 0,
    "high": 0,
    "medium": 0,
    "low": 0,
    "total": 0
  },
  "recommendations": []
}
EOF

# Function to update scan report
update_report() {
    local tool="$1"
    local results="$2"
    
    # Add tool to tools_used array
    jq --arg tool "$tool" '.tools_used += [$tool]' "$REPORT_FILE" > "${REPORT_FILE}.tmp" && mv "${REPORT_FILE}.tmp" "$REPORT_FILE"
    
    # Add results to vulnerabilities array (if results provided)
    if [ -n "$results" ]; then
        jq --argjson results "$results" '.vulnerabilities += $results' "$REPORT_FILE" > "${REPORT_FILE}.tmp" && mv "${REPORT_FILE}.tmp" "$REPORT_FILE"
    fi
}

# Function to update summary counts
update_summary() {
    local severity="$1"
    local count="$2"
    
    jq --arg severity "$severity" --argjson count "$count" '.summary[$severity] += $count | .summary.total += $count' "$REPORT_FILE" > "${REPORT_FILE}.tmp" && mv "${REPORT_FILE}.tmp" "$REPORT_FILE"
}

echo "📦 Scanning Node.js dependencies..."
if command -v npm &> /dev/null; then
    echo "🔍 Running npm audit..."
    
    # Run npm audit and capture results
    if npm audit --json > "${REPORTS_DIR}/npm-audit-${TIMESTAMP}.json" 2>/dev/null; then
        echo "✅ npm audit completed"
        
        # Parse npm audit results
        if [ -s "${REPORTS_DIR}/npm-audit-${TIMESTAMP}.json" ]; then
            CRITICAL_COUNT=$(jq -r '.metadata.vulnerabilities.critical // 0' "${REPORTS_DIR}/npm-audit-${TIMESTAMP}.json")
            HIGH_COUNT=$(jq -r '.metadata.vulnerabilities.high // 0' "${REPORTS_DIR}/npm-audit-${TIMESTAMP}.json")
            MODERATE_COUNT=$(jq -r '.metadata.vulnerabilities.moderate // 0' "${REPORTS_DIR}/npm-audit-${TIMESTAMP}.json")
            LOW_COUNT=$(jq -r '.metadata.vulnerabilities.low // 0' "${REPORTS_DIR}/npm-audit-${TIMESTAMP}.json")
            
            update_summary "critical" "$CRITICAL_COUNT"
            update_summary "high" "$HIGH_COUNT"
            update_summary "medium" "$MODERATE_COUNT"
            update_summary "low" "$LOW_COUNT"
            
            echo "📊 npm audit findings: Critical: $CRITICAL_COUNT, High: $HIGH_COUNT, Medium: $MODERATE_COUNT, Low: $LOW_COUNT"
        fi
    else
        echo "⚠️ npm audit failed or found issues"
    fi
    
    update_report "npm_audit" "[]"
else
    echo "❌ npm not found, skipping dependency scan"
fi

echo "🔍 Scanning Docker images..."
if command -v docker &> /dev/null; then
    echo "🐳 Scanning Docker images for vulnerabilities..."
    
    # Get list of Xpress images
    IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(xpress|postgres|redis|nginx)" | head -5)
    
    for image in $IMAGES; do
        echo "🔍 Scanning image: $image"
        
        # Use Trivy if available
        if command -v trivy &> /dev/null; then
            trivy image --format json --output "${REPORTS_DIR}/trivy-${image//[\/:]/_}-${TIMESTAMP}.json" "$image" || true
            echo "✅ Trivy scan completed for $image"
        else
            echo "⚠️ Trivy not available, skipping container scan for $image"
        fi
    done
    
    update_report "trivy" "[]"
else
    echo "❌ Docker not found, skipping container scan"
fi

echo "🌐 Scanning web application..."
if command -v nmap &> /dev/null; then
    echo "🔍 Running network security scan..."
    
    # Scan localhost ports
    nmap -sV -sC -O localhost -p 80,443,3000,5432,6379 --script vuln -oX "${REPORTS_DIR}/nmap-${TIMESTAMP}.xml" || true
    
    echo "✅ Network scan completed"
    update_report "nmap" "[]"
else
    echo "⚠️ nmap not available, skipping network scan"
fi

# Static code analysis
echo "🔍 Running static code analysis..."
if command -v semgrep &> /dev/null; then
    echo "🔍 Running Semgrep static analysis..."
    
    semgrep --config=auto --json --output="${REPORTS_DIR}/semgrep-${TIMESTAMP}.json" "$SCAN_DIR/src" || true
    
    echo "✅ Static analysis completed"
    update_report "semgrep" "[]"
else
    echo "⚠️ Semgrep not available, installing..."
    if command -v python3 &> /dev/null && command -v pip3 &> /dev/null; then
        pip3 install semgrep
        echo "✅ Semgrep installed, running scan..."
        semgrep --config=auto --json --output="${REPORTS_DIR}/semgrep-${TIMESTAMP}.json" "$SCAN_DIR/src" || true
        update_report "semgrep" "[]"
    else
        echo "❌ Cannot install Semgrep, skipping static analysis"
    fi
fi

# Secret scanning
echo "🔐 Scanning for secrets..."
if command -v gitleaks &> /dev/null; then
    echo "🔍 Running Gitleaks secret scan..."
    
    gitleaks detect --source="$SCAN_DIR" --report-format=json --report-path="${REPORTS_DIR}/gitleaks-${TIMESTAMP}.json" || true
    
    echo "✅ Secret scan completed"
    update_report "gitleaks" "[]"
else
    echo "⚠️ Gitleaks not available, using basic secret detection..."
    
    # Basic secret pattern detection
    SECRET_PATTERNS=(
        "password.*=.*['\"][^'\"]{8,}['\"]"
        "api[_-]?key.*=.*['\"][^'\"]{20,}['\"]"
        "secret.*=.*['\"][^'\"]{20,}['\"]"
        "token.*=.*['\"][^'\"]{20,}['\"]"
        "AKIA[0-9A-Z]{16}"
        "[0-9a-f]{32}"
    )
    
    SECRET_FOUND=false
    for pattern in "${SECRET_PATTERNS[@]}"; do
        if grep -r -i -E "$pattern" "$SCAN_DIR/src" "$SCAN_DIR/.env*" 2>/dev/null | grep -v node_modules; then
            SECRET_FOUND=true
            update_summary "high" "1"
        fi
    done
    
    if [ "$SECRET_FOUND" = true ]; then
        echo "⚠️ Potential secrets detected in code"
    else
        echo "✅ No obvious secrets detected"
    fi
    
    update_report "basic_secret_scan" "[]"
fi

# Database security scan
echo "🗄️ Scanning database security..."
if command -v psql &> /dev/null; then
    echo "🔍 Running PostgreSQL security checks..."
    
    # Basic PostgreSQL security checks (if database is running)
    if pg_isready -h localhost -p 5432 >/dev/null 2>&1; then
        cat > "${REPORTS_DIR}/db-security-check-${TIMESTAMP}.sql" << 'EOSQL'
-- Database security checks
SELECT 'weak_passwords' as check_type, usename, 'User may have weak password' as finding 
FROM pg_user WHERE passwd IS NULL OR passwd = '';

SELECT 'superuser_accounts' as check_type, usename, 'Superuser account detected' as finding
FROM pg_user WHERE usesuper = true;

SELECT 'public_schema_perms' as check_type, 'public', 'Check public schema permissions' as finding;
EOSQL
        
        echo "✅ Database security checks prepared"
        update_report "postgresql_security" "[]"
    else
        echo "⚠️ Database not accessible, skipping database security scan"
    fi
else
    echo "❌ PostgreSQL client not available, skipping database scan"
fi

# Configuration security scan
echo "⚙️ Scanning configuration security..."

# Check for insecure configurations
CONFIG_ISSUES=0

# Check Docker compose security
if [ -f "$SCAN_DIR/docker-compose.yml" ]; then
    if grep -q "privileged.*true" "$SCAN_DIR/docker-compose.yml"; then
        echo "⚠️ Privileged containers detected in Docker Compose"
        ((CONFIG_ISSUES++))
    fi
    
    if grep -q ":.*:" "$SCAN_DIR/docker-compose.yml" | grep -v "127.0.0.1"; then
        echo "⚠️ Publicly exposed ports detected in Docker Compose"
        ((CONFIG_ISSUES++))
    fi
fi

# Check environment files
if ls "$SCAN_DIR"/.env* >/dev/null 2>&1; then
    for env_file in "$SCAN_DIR"/.env*; do
        if [ -r "$env_file" ] && grep -qi "password.*=.*123\|password.*=.*test\|password.*=.*admin" "$env_file"; then
            echo "⚠️ Weak default passwords in $env_file"
            ((CONFIG_ISSUES++))
        fi
    done
fi

update_summary "medium" "$CONFIG_ISSUES"
update_report "configuration_scan" "[]"

# Generate final report summary
echo "📊 Finalizing vulnerability scan report..."

# Add recommendations based on findings
TOTAL_VULNS=$(jq '.summary.total' "$REPORT_FILE")
if [ "$TOTAL_VULNS" -gt 50 ]; then
    jq '.recommendations += ["High vulnerability count - prioritize patching critical and high severity issues"]' "$REPORT_FILE" > "${REPORT_FILE}.tmp" && mv "${REPORT_FILE}.tmp" "$REPORT_FILE"
fi

CRITICAL_VULNS=$(jq '.summary.critical' "$REPORT_FILE")
if [ "$CRITICAL_VULNS" -gt 0 ]; then
    jq '.recommendations += ["Critical vulnerabilities detected - immediate remediation required"]' "$REPORT_FILE" > "${REPORT_FILE}.tmp" && mv "${REPORT_FILE}.tmp" "$REPORT_FILE"
fi

# Set scan completion
jq --arg completion_time "$(date -u +%Y-%m-%dT%H:%M:%SZ)" '.scan_completed = $completion_time' "$REPORT_FILE" > "${REPORT_FILE}.tmp" && mv "${REPORT_FILE}.tmp" "$REPORT_FILE"

echo ""
echo "✅ Vulnerability scan completed!"
echo "📊 Scan Summary:"
echo "   Critical: $(jq '.summary.critical' "$REPORT_FILE")"
echo "   High: $(jq '.summary.high' "$REPORT_FILE")"  
echo "   Medium: $(jq '.summary.medium' "$REPORT_FILE")"
echo "   Low: $(jq '.summary.low' "$REPORT_FILE")"
echo "   Total: $(jq '.summary.total' "$REPORT_FILE")"
echo ""
echo "📄 Full report: $REPORT_FILE"
echo "📁 Individual tool reports: $REPORTS_DIR"

# Generate HTML report for easier viewing
if command -v python3 &> /dev/null; then
    cat > "${REPORTS_DIR}/generate-html-report.py" << 'EOF'
#!/usr/bin/env python3
import json
import sys
from datetime import datetime

def generate_html_report(json_file):
    with open(json_file, 'r') as f:
        data = json.load(f)
    
    html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Vulnerability Scan Report - Xpress Ops Tower</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ background: #f5f5f5; padding: 20px; border-radius: 5px; }}
        .critical {{ background: #ffebee; border-left: 4px solid #f44336; padding: 10px; margin: 10px 0; }}
        .high {{ background: #fff3e0; border-left: 4px solid #ff9800; padding: 10px; margin: 10px 0; }}
        .medium {{ background: #f3e5f5; border-left: 4px solid #9c27b0; padding: 10px; margin: 10px 0; }}
        .low {{ background: #e8f5e8; border-left: 4px solid #4caf50; padding: 10px; margin: 10px 0; }}
        .summary {{ display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; margin: 20px 0; }}
        .summary-card {{ text-align: center; padding: 20px; border-radius: 5px; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>🔍 Vulnerability Scan Report</h1>
        <p>Project: {data['project']}</p>
        <p>Scan Time: {data['scan_timestamp']}</p>
        <p>Scan ID: {data['scan_id']}</p>
    </div>
    
    <div class="summary">
        <div class="summary-card critical">
            <h2>{data['summary']['critical']}</h2>
            <p>Critical</p>
        </div>
        <div class="summary-card high">
            <h2>{data['summary']['high']}</h2>
            <p>High</p>
        </div>
        <div class="summary-card medium">
            <h2>{data['summary']['medium']}</h2>
            <p>Medium</p>
        </div>
        <div class="summary-card low">
            <h2>{data['summary']['low']}</h2>
            <p>Low</p>
        </div>
    </div>
    
    <h2>🛠️ Tools Used</h2>
    <ul>
    """
    
    for tool in data['tools_used']:
        html += f"<li>{tool}</li>"
    
    html += f"""
    </ul>
    
    <h2>💡 Recommendations</h2>
    <ul>
    """
    
    for rec in data['recommendations']:
        html += f"<li>{rec}</li>"
    
    html += """
    </ul>
    
    <p><small>Report generated at """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + """</small></p>
</body>
</html>
"""
    
    html_file = json_file.replace('.json', '.html')
    with open(html_file, 'w') as f:
        f.write(html)
    
    print(f"HTML report generated: {html_file}")

if __name__ == '__main__':
    generate_html_report(sys.argv[1])
EOF

    python3 "${REPORTS_DIR}/generate-html-report.py" "$REPORT_FILE"
    echo "📄 HTML report: ${REPORT_FILE%.json}.html"
fi

# Alert if critical vulnerabilities found
if [ "$(jq '.summary.critical' "$REPORT_FILE")" -gt 0 ]; then
    echo ""
    echo "🚨 CRITICAL VULNERABILITIES DETECTED!"
    echo "   Immediate remediation required"
    echo "   Consider blocking deployment until resolved"
    exit 1
fi

echo "✅ Vulnerability scan completed successfully"